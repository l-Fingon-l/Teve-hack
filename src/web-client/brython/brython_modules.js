__BRYTHON__.VFS_timestamp = 1682034188591
if(typeof document !== 'undefined'){
    __BRYTHON__.brython_modules = $B.last(document.getElementsByTagName('script')).src
}
__BRYTHON__.use_VFS = true
var scripts = {"$timestamp": 1682034188588, "tevehack": [".py", "# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#                        class declarations\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\"\"\"\n    1: integer of a PlayerID, usually == 2, but on initialization \\ during loading == 0;\n        there's a bug with it at 14707, 46037 and 64922, it's never == 1\n    2: integer of a PlayerID, usually == 1, but on initialization == 0\n    3: food used by Player (by ID)\n    4: Profession level, integer of a PlayerID, during initialization \\ loading == 0\n    5: Something connected to the profession (fishing). Either 1 (after giving the first FishingRod),\n        or 0 (when unlearning), during initialization \\ loading == 0\n    6: Fishing profession points (rank), during initialization \\ loading == 0.\n        0 = \"Never caught a fish\"\n        1 = \"Fishing Newbie\"\n        2 = \"Journeyman Fisherman\"\n        3 = \"Expert Fisherman\"\n        4 = \"Master Fisherman\"\n        5 = \"Legendary Fisherman\"\n    7: Revival location, an integer\n    8. imp5Stage, an integer\n    9: usually == 1\n    10: hash of a PlayerID's hero\n    11: Hero XP\n    12: Hero LocationX\n    13: Hero LocationY\n    14: 2*n(0-4) abilities of a PlayerID's hero:\n        1: ability index of GU array of abilities\n        2: ability level\n    15: checksum\n    ~~~ At this point the hero code is generated ~~~\n    ~~~     Also set hu = OU[lU], set nu = 1     ~~~\n    1: Gold, not more than 1010010\n    2: Shards, not more than 477\n    3: Some \"PvP points\"\n    4: Some \"Unlocked Critter Tiers\"\n    5: inventory:\n        1: number of items carried\n        x6 items:\n            1: item ID from Yu[] \\ 30 if empty\n            2: amount of this item if stackable \\ 0 otherwise\n    6: stash inventory:\n        1: number of items carried\n        x6 items:\n            1: item ID from Yu[] \\ 30 if empty\n            2: amount of this item if stackable \\ 0 otherwise\n    7: checksum\n\"\"\"\n\nclass Ability:\n    def __init__(self, id, level):\n        self.id: int = id\n        self.level: int = level\n\n\nclass Item:\n    def __init__(self, id, amount):\n        self.id: int = id\n        self.amount: int = amount\n\n\nclass HeroCodeFields:\n    def __init__(self, int1, int2, food, professionLvl, hasFishingRod,\n        professionRank, revivalLocation, imp5Stage, int3, heroID, heroXP, locationX, locationY):\n        self.int1: int = int1\n        self.int2: int = int2\n        self.food: int = food\n        self.professionLvl: int = professionLvl\n        self.hasFishingRod: int = hasFishingRod\n        self.professionRank: str = professionRank\n        self.revivalLocation: int = revivalLocation\n        self.imp5Stage: int = imp5Stage\n        self.int3: int = int3\n        self.heroID: str = heroID\n        self.heroXP: int = heroXP\n        self.locationX: int = locationX\n        self.locationY: int = locationY\n        self.abilities: list = []\n        self.checksum: int = 0\n\n\nclass ItemCodeFields:\n    def __init__(self, gold, shards, pvpPoints, numberOfItems, unlockedCritterTiers):\n        self.gold: int = gold\n        self.shards: int = shards\n        self.pvpPoints: int = pvpPoints\n        self.unlockedCritterTiers: int = unlockedCritterTiers\n        self.numberOfItems: int = numberOfItems\n        self.items: dict = {}\n        self.numberOfStashItems: int = 0\n        self.stashItems: dict = {}\n        self.checksum: int = 0\n    \n\n\nProfessionRank = {\n    'Never caught a fish': 0,\n    'Fishing Newbie': 1,\n    'Journeyman Fisherman': 2,\n    'Expert Fisherman': 3,\n    'Master Fisherman': 4,\n    'Legendary Fisherman': 5,\n    0: 'Never caught a fish',\n    1: 'Fishing Newbie',\n    2: 'Journeyman Fisherman',\n    3: 'Expert Fisherman',\n    4: 'Master Fisherman',\n    5: 'Legendary Fisherman'\n}\n\nHero = {\n    \"Acolyte (Male)\": 1,\n    \"Acolyte (Female)\": 2,\n    \"Archer\": 3,\n    \"Druid\": 4,\n    \"Initiate\": 5,\n    \"Novice (Female)\": 6,\n    \"Novice (Male)\": 7,\n    \"Swordsman\": 8,\n    \"Templar\": 9,\n    \"Thief\": 10,\n    \"Witch Hunter\": 11,\n    \"ArchDruid\": 12,\n    \"ArchTemplar\": 13,\n    \"Cleric (Male)\": 14,\n    \"Cleric (Female)\": 15,\n    \"Hunter\": 16,\n    \"Knight\": 17,\n    \"Mage\": 18,\n    \"Rogue\": 19,\n    \"Slayer\": 20,\n    \"Assassin\": 21,\n    \"Stalker\": 22,\n    \"Imperial Knight\": 23,\n    \"Crusader\": 24,\n    \"High Templar\": 25,\n    \"Dark Templar\": 26,\n    \"Marksman\": 27,\n    \"Tracker\": 28,\n    \"Witcher\": 29,\n    \"Inquisitor\": 30,\n    \"Priest\": 31,\n    \"Matriarch\": 32,\n    \"Wizard\": 33,\n    \"Sage\": 34,\n    \"Shaman\": 35,\n    \"Shapeshifter\": 36,\n    \"ArchSage\": 37,\n    \"White Wizard\": 38,\n    \"Hierophant\": 39,\n    \"Prophetess\": 40,\n    \"Sniper\": 41,\n    \"Monster Hunter\": 42,\n    \"Avenger\": 43,\n    \"Champion\": 44,\n    \"Dark ArchTemplar\": 45,\n    \"Grand Inquisitor\": 46,\n    \"Grand Templar\": 47,\n    \"Master Stalker\": 48,\n    \"Phantom Assassin\": 49,\n    \"Professional Witcher\": 50,\n    \"RuneMaster\": 51,\n    \"Summoner\": 52,\n    1: \"Acolyte (Male)\",\n    2: \"Acolyte (Female)\",\n    3: \"Archer\",\n    4: \"Druid\",\n    5: \"Initiate\",\n    6: \"Novice (Female)\",\n    7: \"Novice (Male)\",\n    8: \"Swordsman\",\n    9: \"Templar\",\n    10: \"Thief\",\n    11: \"Witch Hunter\",\n    12: \"ArchDruid\",\n    13: \"ArchTemplar\",\n    14: \"Cleric (Male)\",\n    15: \"Cleric (Female)\",\n    16: \"Hunter\",\n    17: \"Knight\",\n    18: \"Mage\",\n    19: \"Rogue\",\n    20: \"Slayer\",\n    21: \"Assassin\",\n    22: \"Stalker\",\n    23: \"Imperial Knight\",\n    24: \"Crusader\",\n    25: \"High Templar\",\n    26: \"Dark Templar\",\n    27: \"Marksman\",\n    28: \"Tracker\",\n    29: \"Witcher\",\n    30: \"Inquisitor\",\n    31: \"Priest\",\n    32: \"Matriarch\",\n    33: \"Wizard\",\n    34: \"Sage\",\n    35: \"Shaman\",\n    36: \"Shapeshifter\",\n    37: \"ArchSage\",\n    38: \"White Wizard\",\n    39: \"Hierophant\",\n    40: \"Prophetess\",\n    41: \"Sniper\",\n    42: \"Monster Hunter\",\n    43: \"Avenger\",\n    44: \"Champion\",\n    45: \"Dark ArchTemplar\",\n    46: \"Grand Inquisitor\",\n    47: \"Grand Templar\",\n    48: \"Master Stalker\",\n    49: \"Phantom Assassin\",\n    50: \"Professional Witcher\",\n    51: \"RuneMaster\",\n    52: \"Summoner\"\n}\n\nItemName = {\n    \"Fine Sword\": 1,\n    \"Plated Shield\": 2,\n    \"Staff\": 3,\n    \"Minor Potion of Healing\": 4,\n    \"Minor Potion of Mana\": 5,\n    \"Sharp Claws\": 6,\n    \"Blackpowder Musket\": 7,\n    \"Crystal Wand\": 8,\n    \"Elderwood Bow\": 9,\n    \"Moon Armor\": 10,\n    \"Superior Wand\": 11,\n    \"FrostShield\": 12,\n    \"Frostfang\": 13,\n    \"Elder Rod\": 14,\n    \"Dull Warp Blade\": 15,\n    \"Leather Armor\": 16,\n    \"Lucky Amulet\": 17,\n    \"Potion of Health\": 18,\n    \"Greater Potion of Mana\": 19,\n    \"Psi Blade\": 20,\n    \"Reinforced Armor\": 21,\n    \"Stitches' Dagger\": 22,\n    \"Stitches' Totem\": 23,\n    \"Aiur's Legacy\": 24,\n    \"BlackGrave Wand\": 25,\n    \"Skull Staff\": 26,\n    \"Stitches' Legacy\": 27,\n    \"Clarity Potion\": 28,\n    \"Super Clarity Potion\": 29,\n    \"Potion of Super Restoration\": 31,\n    \"Belt of Endurance\": 32,\n    \"Boots of Speed\": 33,\n    \"Boots of the Eagle\": 34,\n    \"Bracers of the Bear\": 35,\n    \"Celestial Orb\": 36,\n    \"Enchanted Axe\": 37,\n    \"Arcane Staff\": 38,\n    \"Cunning Edge\": 39,\n    \"Firebrand\": 40,\n    \"Helmet of Valor\": 41,\n    \"Long Rifle\": 42,\n    \"Ring of Melitele\": 43,\n    \"Psionic Cuirass\": 44,\n    \"Scroll of the Lich\": 45,\n    \"Shield of the Avenger\": 46,\n    \"Sniper Rifle\": 47,\n    \"Soul Wand\": 48,\n    \"VanCliffe's Armor\": 49,\n    \"Warchief's Pride\": 50,\n    \"Blood Diamond\": 51,\n    \"Chillrend\": 52,\n    \"Dusk's Legacy\": 53,\n    \"Mythpowder Rifle\": 54,\n    \"Sword of Blessed Flame\": 55,\n    \"Scroll of Teleportation\": 56,\n    \"Arcane Amulet\": 57,\n    \"Claws of Striking\": 58,\n    \"Elven Armor\": 59,\n    \"Superior Vizima Gauntlets\": 60,\n    \"Circlet\": 61,\n    \"Sharpened Glaive\": 62,\n    \"Slicer\": 63,\n    \"Stout Shield\": 64,\n    \"Worn Gauntlets\": 65,\n    \"Horadric Staff\": 66,\n    \"The Executioner\": 67,\n    \"Windforce\": 68,\n    \"The Ark Royal\": 71,\n    \"The Spirit Shroud\": 72,\n    \"The Stone of Jordan\": 73,\n    \"Doombringer\": 75,\n    \"Frostbrand\": 77,\n    \"Homunculus\": 78,\n    \"Guardian Naga\": 79,\n    \"Death Reaver\": 80,\n    \"Ghost Armor\": 81,\n    \"Guardian Angel\": 83,\n    \"Hand of Blessed Light\": 84,\n    \"Azurewrath\": 85,\n    \"Synergy Blade\": 86,\n    \"Hand of God\": 87,\n    \"Psionic Stone\": 88,\n    \"The Psionic Razor\": 89,\n    \"The Heart of Evo\": 90,\n    \"Double-Barrel Rifle\": 91,\n    \"The Pendant of Nagre\": 92,\n    \"Lam Esen's Tome\": 93,\n    \"Infernostride\": 94,\n    \"Battle Gauntlets\": 95,\n    \"Atma's Defence\": 96,\n    \"Feral Totem\": 97,\n    \"Tome of Awakening\": 98,\n    \"Hades' Shield\": 99,\n    \"Bethrezen's Flame\": 100,\n    \"Golden Arrows\": 101,\n    \"Necklace of Seven Souls\": 102,\n    \"Stone of Vsmir\": 103,\n    \"Duriel's Shell\": 104,\n    \"Hexfire's Edge\": 105,\n    \"Icecrown's Visage\": 106,\n    \"Megaton Blades\": 107,\n    \"Staff of the Ages\": 108,\n    \"Tome of the Unlife\": 109,\n    \"Zakarum's Hand\": 110,\n    \"Angel's Sanctuary\": 113,\n    \"Athena's Aim\": 114,\n    \"Dawn's Legacy\": 116,\n    \"Eagle Eye\": 117,\n    \"Titan's Aegis\": 121,\n    \"Shield of Unending Flame\": 123,\n    \"Phoenix's Stone\": 124,\n    \"Good Fishing Rod\": 133,\n    \"Basic Fishing Rod\": 134,\n    \"Mastercraft Fishing Rod\": 135,\n    \"Mystic Fishing Rod\": 136,\n    \"Silver Fishing Rod\": 137,\n    \"Fanged Piranah\": 138,\n    \"Flying Wish Fish\": 139,\n    \"Goldskin\": 140,\n    \"King Bass\": 141,\n    \"Mutated Bluefish\": 142,\n    \"Rainbow Fish\": 143,\n    \"Salmon\": 144,\n    \"Thunderfish\": 145,\n    \"Trout\": 146,\n    \"Tuna\": 147,\n    \"Yellowskin Bass\": 148,\n    \"Faded Inspirit\": 157,\n    \"Glowing Inspirit\": 186,\n    \"Faith\": 158,\n    \"Fate\": 159,\n    \"Raising Heart\": 160,\n    \"Reinforce\": 161,\n    \"Rune Sihill\": 162,\n    \"Tooth of Belial\": 163,\n    \"Whirlwind\": 164,\n    \"Hope\": 165,\n    \"Potion of Restoration\": 166,\n    \"Raven's Insight\": 177,\n    \"The Grandfather\": 167,\n    \"The Patriarch\": 168,\n    \"Atlantean's Frozen Heart\": 169,\n    \"Atlantean's Frozen Heart\": 170,\n    \"Neptune's Eye\": 171,\n    \"Atalanta's Speed\": 172,\n    \"Black Hades\": 173,\n    \"Raven's Legacy\": 187,\n    \"Hannah's Legend\": 174,\n    \"Wrath of the Lich King\": 175,\n    \"Blaze's Touch\": 176,\n    \"Megaera's Edge\": 178,\n    \"Chaos Grief\": 179,\n    \"Hellforge Plate\": 180,\n    \"Atalanta's Revenge\": 183,\n    \"Life Essence\": 181,\n    \"Mana Essence\": 182,\n    \"The Destiny\": 184,\n    \"Stabilized Void Prism\": 185,\n    1: \"Fine Sword\",\n    2: \"Plated Shield\",\n    3: \"Staff\",\n    4: \"Minor Potion of Healing\",\n    5: \"Minor Potion of Mana\",\n    6: \"Sharp Claws\",\n    7: \"Blackpowder Musket\",\n    8: \"Crystal Wand\",\n    9: \"Elderwood Bow\",\n    10: \"Moon Armor\",\n    11: \"Superior Wand\",\n    12: \"FrostShield\",\n    13: \"Frostfang\",\n    14: \"Elder Rod\",\n    15: \"Dull Warp Blade\",\n    16: \"Leather Armor\",\n    17: \"Lucky Amulet\",\n    18: \"Potion of Health\",\n    19: \"Greater Potion of Mana\",\n    20: \"Psi Blade\",\n    21: \"Reinforced Armor\",\n    22: \"Stitches' Dagger\",\n    23: \"Stitches' Totem\",\n    24: \"Aiur's Legacy\",\n    25: \"BlackGrave Wand\",\n    26: \"Skull Staff\",\n    27: \"Stitches' Legacy\",\n    28: \"Clarity Potion\",\n    29: \"Super Clarity Potion\",\n    31: \"Potion of Super Restoration\",\n    32: \"Belt of Endurance\",\n    33: \"Boots of Speed\",\n    34: \"Boots of the Eagle\",\n    35: \"Bracers of the Bear\",\n    36: \"Celestial Orb\",\n    37: \"Enchanted Axe\",\n    38: \"Arcane Staff\",\n    39: \"Cunning Edge\",\n    40: \"Firebrand\",\n    41: \"Helmet of Valor\",\n    42: \"Long Rifle\",\n    43: \"Ring of Melitele\",\n    44: \"Psionic Cuirass\",\n    45: \"Scroll of the Lich\",\n    46: \"Shield of the Avenger\",\n    47: \"Sniper Rifle\",\n    48: \"Soul Wand\",\n    49: \"VanCliffe's Armor\",\n    50: \"Warchief's Pride\",\n    51: \"Blood Diamond\",\n    52: \"Chillrend\",\n    53: \"Dusk's Legacy\",\n    54: \"Mythpowder Rifle\",\n    55: \"Sword of Blessed Flame\",\n    56: \"Scroll of Teleportation\",\n    57: \"Arcane Amulet\",\n    58: \"Claws of Striking\",\n    59: \"Elven Armor\",\n    60: \"Superior Vizima Gauntlets\",\n    61: \"Circlet\",\n    62: \"Sharpened Glaive\",\n    63: \"Slicer\",\n    64: \"Stout Shield\",\n    65: \"Worn Gauntlets\",\n    66: \"Horadric Staff\",\n    67: \"The Executioner\",\n    68: \"Windforce\",\n    71: \"The Ark Royal\",\n    72: \"The Spirit Shroud\",\n    73: \"The Stone of Jordan\",\n    75: \"Doombringer\",\n    77: \"Frostbrand\",\n    78: \"Homunculus\",\n    79: \"Guardian Naga\",\n    80: \"Death Reaver\",\n    81: \"Ghost Armor\",\n    83: \"Guardian Angel\",\n    84: \"Hand of Blessed Light\",\n    85: \"Azurewrath\",\n    86: \"Synergy Blade\",\n    87: \"Hand of God\",\n    88: \"Psionic Stone\",\n    89: \"The Psionic Razor\",\n    90: \"The Heart of Evo\",\n    91: \"Double-Barrel Rifle\",\n    92: \"The Pendant of Nagre\",\n    93: \"Lam Esen's Tome\",\n    94: \"Infernostride\",\n    95: \"Battle Gauntlets\",\n    96: \"Atma's Defence\",\n    97: \"Feral Totem\",\n    98: \"Tome of Awakening\",\n    99: \"Hades' Shield\",\n    100: \"Bethrezen's Flame\",\n    101: \"Golden Arrows\",\n    102: \"Necklace of Seven Souls\",\n    103: \"Stone of Vsmir\",\n    104: \"Duriel's Shell\",\n    105: \"Hexfire's Edge\",\n    106: \"Icecrown's Visage\",\n    107: \"Megaton Blades\",\n    108: \"Staff of the Ages\",\n    109: \"Tome of the Unlife\",\n    110: \"Zakarum's Hand\",\n    113: \"Angel's Sanctuary\",\n    114: \"Athena's Aim\",\n    116: \"Dawn's Legacy\",\n    117: \"Eagle Eye\",\n    121: \"Titan's Aegis\",\n    123: \"Shield of Unending Flame\",\n    124: \"Phoenix's Stone\",\n    133: \"Good Fishing Rod\",\n    134: \"Basic Fishing Rod\",\n    135: \"Mastercraft Fishing Rod\",\n    136: \"Mystic Fishing Rod\",\n    137: \"Silver Fishing Rod\",\n    138: \"Fanged Piranah\",\n    139: \"Flying Wish Fish\",\n    140: \"Goldskin\",\n    141: \"King Bass\",\n    142: \"Mutated Bluefish\",\n    143: \"Rainbow Fish\",\n    144: \"Salmon\",\n    145: \"Thunderfish\",\n    146: \"Trout\",\n    147: \"Tuna\",\n    148: \"Yellowskin Bass\",\n    157: \"Faded Inspirit\",\n    186: \"Glowing Inspirit\",\n    158: \"Faith\",\n    159: \"Fate\",\n    160: \"Raising Heart\",\n    161: \"Reinforce\",\n    162: \"Rune Sihill\",\n    163: \"Tooth of Belial\",\n    164: \"Whirlwind\",\n    165: \"Hope\",\n    166: \"Potion of Restoration\",\n    177: \"Raven's Insight\",\n    167: \"The Grandfather\",\n    168: \"The Patriarch\",\n    169: \"Atlantean's Frozen Heart\",\n    170: \"Atlantean's Frozen Heart\",\n    171: \"Neptune's Eye\",\n    172: \"Atalanta's Speed\",\n    173: \"Black Hades\",\n    187: \"Raven's Legacy\",\n    174: \"Hannah's Legend\",\n    175: \"Wrath of the Lich King\",\n    176: \"Blaze's Touch\",\n    178: \"Megaera's Edge\",\n    179: \"Chaos Grief\",\n    180: \"Hellforge Plate\",\n    183: \"Atalanta's Revenge\",\n    181: \"Life Essence\",\n    182: \"Mana Essence\",\n    184: \"The Destiny\",\n    185: \"Stabilized Void Prism\"\n}\n\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#                        global variables\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nau = {}\noU = {}\nOU = {}\nlU = 0\nFu = False\nQu = False\nhu = ''\nqu = None\nnu = 0\nfu = False\nku = False\nTu = {}\nju = 0\nYu = {}\nxu = 0\nGu = {}\ngu = 0\ndu = {}\nRu = {}\nIu = 0\nbj_forLoopBIndex = 0\nplayer_name = ''\n\nkeep_hash = False\nname_hash = 0\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#                     function definitions\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# 70957 ftw\ndef pEw():  # Init function, takes nothing returns nothing\n    global xu, ju, gu, hu, Fu, ku, Qu, qu, nu, fu\n    Tu[0x1] = 1211117623\n    Tu[0x2] = 1211117620\n    Tu[0x3] = 1211117634\n    Tu[0x4] = 1211117622\n    Tu[0x5] = 1211117621\n    Tu[0x6] = 1211117617\n    Tu[0x7] = 1211117618\n    Tu[0x8] = 1211117619\n    Tu[0x9] = 1211117633\n    Tu[0xA] = 1211117624\n    Tu[0xB] = 1211117625\n    Tu[0xC] = 1211117640\n    Tu[0xD] = 1211117643\n    Tu[0xE] = 1211117637\n    Tu[0xF] = 1211117638\n    Tu[0x10] = 1211117639\n    Tu[0x11] = 1211117642\n    Tu[0x12] = 1211117641\n    Tu[0x13] = 1211117644\n    Tu[0x14] = 1211117645\n    Tu[0x15] = 1211117873\n    Tu[0x16] = 1211117872\n    Tu[0x17] = 1211117874\n    Tu[0x18] = 1211117875\n    Tu[0x19] = 1211117892\n    Tu[0x1A] = 1211117891\n    Tu[0x1B] = 1211117877\n    Tu[0x1C] = 1211117876\n    Tu[0x1D] = 1211117894\n    Tu[0x1E] = 1211117893\n    Tu[0x1F] = 1211117890\n    Tu[0x20] = 1211117889\n    Tu[0x21] = 1211117879\n    Tu[0x22] = 1211117878\n    Tu[0x23] = 1211117881\n    Tu[0x24] = 1211117880\n    Tu[0x25] = 1211118131\n    Tu[0x26] = 1211118132\n    Tu[0x27] = 1211118147\n    Tu[0x28] = 1211118146\n    Tu[0x29] = 1211118149\n    Tu[0x2A] = 1211118150\n    Tu[0x2B] = 1211118155\n    Tu[0x2C] = 1211118152\n    Tu[0x2D] = 1211118157\n    Tu[0x2E] = 1211118161\n    Tu[0x2F] = 1211118156\n    Tu[0x30] = 1211118159\n    Tu[0x31] = 1211118158\n    Tu[0x32] = 1211118160\n    Tu[0x33] = 1211118162\n    Tu[0x34] = 1211118163\n    ju = 52\n    Yu[0x1] = 1227894835\n    Yu[0x2] = 1227894833\n    Yu[0x3] = 1227894834\n    Yu[0x4] = 1227894840\n    Yu[0x5] = 1227894841\n    Yu[0x6] = 1227894850\n    Yu[0x7] = 1227894839\n    Yu[0x8] = 1227894851\n    Yu[0x9] = 1227894838\n    Yu[0xA] = 1227894836\n    Yu[0xB] = 1227894852\n    Yu[0xC] = 1227894853\n    Yu[0xD] = 1227894837\n    Yu[0xE] = 1227894855\n    Yu[0xF] = 1227894856\n    Yu[0x10] = 1227894858\n    Yu[0x11] = 1227894857\n    Yu[0x12] = 1227894849\n    Yu[0x13] = 1227894854\n    Yu[0x14] = 1227894866\n    Yu[0x15] = 1227894864\n    Yu[0x16] = 1227894863\n    Yu[0x17] = 1227894861\n    Yu[0x18] = 1227894860\n    Yu[0x19] = 1227894865\n    Yu[0x1A] = 1227894862\n    Yu[0x1B] = 1227894867\n    Yu[0x1C] = 1227895111\n    Yu[0x1D] = 1227895110\n    Yu[0x1F] = 1227895109\n    Yu[0x20] = 1227895116\n    Yu[0x21] = 1227895125\n    Yu[0x22] = 1227895347\n    Yu[0x23] = 1227895128\n    Yu[0x24] = 1227895112\n    Yu[0x25] = 1227895348\n    Yu[0x26] = 1227895123\n    Yu[0x27] = 1227895115\n    Yu[0x28] = 1227895344\n    Yu[0x29] = 1227895345\n    Yu[0x2A] = 1227895113\n    Yu[0x2B] = 1227895124\n    Yu[0x2C] = 1227895121\n    Yu[0x2D] = 1227895122\n    Yu[0x2E] = 1227895114\n    Yu[0x2F] = 1227895120\n    Yu[0x30] = 1227895130\n    Yu[0x31] = 1227895346\n    Yu[0x32] = 1227895117\n    Yu[0x33] = 1227895129\n    Yu[0x34] = 1227895119\n    Yu[0x35] = 1227895118\n    Yu[0x36] = 1227895126\n    Yu[0x37] = 1227895127\n    Yu[0x38] = 1227895350\n    Yu[0x39] = 1227895366\n    Yu[0x3A] = 1227895353\n    Yu[0x3B] = 1227895363\n    Yu[0x3C] = 1227895368\n    Yu[0x3D] = 1227895367\n    Yu[0x3E] = 1227895364\n    Yu[0x3F] = 1227895361\n    Yu[0x40] = 1227895362\n    Yu[0x41] = 1227895365\n    Yu[0x42] = 1227895369\n    Yu[0x43] = 1227895371\n    Yu[0x44] = 1227895370\n    Yu[0x47] = 1227895383\n    Yu[0x48] = 1227895376\n    Yu[0x49] = 1227895377\n    Yu[0x4B] = 1227895384\n    Yu[0x4D] = 1227895372\n    Yu[0x4E] = 1227895381\n    Yu[0x4F] = 1227895380\n    Yu[0x50] = 1227895374\n    Yu[0x51] = 1227895382\n    Yu[0x53] = 1227895375\n    Yu[0x54] = 1227895378\n    Yu[0x55] = 1227895373\n    Yu[0x56] = 1227895600\n    Yu[0x57] = 1227895603\n    Yu[0x58] = 1227895604\n    Yu[0x59] = 1227895609\n    Yu[0x5A] = 1227895606\n    Yu[0x5B] = 1227895607\n    Yu[0x5C] = 1227895617\n    Yu[0x5D] = 1227895619\n    Yu[0x5E] = 1227895618\n    Yu[0x5F] = 1227895605\n    Yu[0x60] = 1227895608\n    Yu[0x61] = 1227895623\n    Yu[0x62] = 1227895622\n    Yu[0x63] = 1227895625\n    Yu[0x64] = 1227895624\n    Yu[0x65] = 1227895628\n    Yu[0x66] = 1227895630\n    Yu[0x67] = 1227895634\n    Yu[0x68] = 1227895638\n    Yu[0x69] = 1227895633\n    Yu[0x6A] = 1227895629\n    Yu[0x6B] = 1227895636\n    Yu[0x6C] = 1227895627\n    Yu[0x6D] = 1227895637\n    Yu[0x6E] = 1227895635\n    Yu[0x71] = 1227895640\n    Yu[0x72] = 1227895639\n    Yu[0x74] = 1227895641\n    Yu[0x75] = 1227895861\n    Yu[0x79] = 1227895642\n    Yu[0x7B] = 1227895632\n    Yu[0x7C] = 1227895631\n    Yu[0x85] = 1227895898\n    Yu[0x86] = 1227895895\n    Yu[0x87] = 1227895894\n    Yu[0x88] = 1227895897\n    Yu[0x89] = 1227895896\n    Yu[0x8A] = 1227896118\n    Yu[0x8B] = 1227896116\n    Yu[0x8C] = 1227896115\n    Yu[0x8D] = 1227896121\n    Yu[0x8E] = 1227896120\n    Yu[0x8F] = 1227896114\n    Yu[0x90] = 1227896129\n    Yu[0x91] = 1227896117\n    Yu[0x92] = 1227896113\n    Yu[0x93] = 1227896112\n    Yu[0x94] = 1227896119\n    Yu[0x9D] = 1227896136\n    Yu[0x9E] = 1227895386\n    Yu[0x9F] = 1227895862\n    Yu[0xA0] = 1227895886\n    Yu[0xA1] = 1227895887\n    Yu[0xA2] = 1227895888\n    Yu[0xA3] = 1227895863\n    Yu[0xA4] = 1227896135\n    Yu[0xA5] = 1227896134\n    Yu[0xA6] = 1227895108\n    Yu[0xA7] = 1227895858\n    Yu[0xA8] = 1227895856\n    Yu[0xA9] = 1227895860\n    Yu[0xAA] = 1227895860\n    Yu[0xAB] = 1227895857\n    Yu[0xAC] = 1227895883\n    Yu[0xAD] = 1227895385\n    Yu[0xAE] = 1227895884\n    Yu[0xAF] = 1227895882\n    Yu[0xB0] = 1227895885\n    Yu[0xB1] = 1227896138\n    Yu[0xB2] = 1227895880\n    Yu[0xB3] = 1227896139\n    Yu[0xB4] = 1227896140\n    Yu[0xB7] = 1227896137\n    Yu[0xB5] = 1227895602\n    Yu[0xB6] = 1227895601\n    Yu[0xB8] = 1229210963\n    xu = 184\n    Gu[0x1] = 1093677109\n    Gu[0x2] = 1093677108\n    Gu[0x3] = 1093677104\n    Gu[0x4] = 1093677105\n    Gu[0x5] = 1093677107\n    Gu[0x6] = 1093677106\n    Gu[0x7] = 1093677112\n    Gu[0x8] = 1093677110\n    Gu[0x9] = 1093677113\n    Gu[0xA] = 1093677111\n    Gu[0xB] = 1093677133\n    Gu[0xC] = 1093677132\n    Gu[0xD] = 1093677131\n    Gu[0xE] = 1093677134\n    Gu[0xF] = 1093677127\n    Gu[0x10] = 1093677125\n    Gu[0x11] = 1093677128\n    Gu[0x12] = 1093677126\n    Gu[0x13] = 1093677121\n    Gu[0x14] = 1093677124\n    Gu[0x15] = 1093677122\n    Gu[0x16] = 1093677123\n    Gu[0x17] = 1093677138\n    Gu[0x18] = 1093677139\n    Gu[0x19] = 1093677140\n    Gu[0x1A] = 1093677141\n    Gu[0x1B] = 1093677360\n    Gu[0x1C] = 1093677362\n    Gu[0x1D] = 1093677146\n    Gu[0x1E] = 1093677361\n    Gu[0x1F] = 1093677143\n    Gu[0x20] = 1093677144\n    Gu[0x21] = 1093677142\n    Gu[0x22] = 1093677145\n    Gu[0x23] = 1093677387\n    Gu[0x24] = 1093677386\n    Gu[0x25] = 1093677385\n    Gu[0x26] = 1093677378\n    Gu[0x27] = 1093677381\n    Gu[0x28] = 1093677382\n    Gu[0x29] = 1093677383\n    Gu[0x2A] = 1093677384\n    Gu[0x2B] = 1093677367\n    Gu[0x2C] = 1093677366\n    Gu[0x2D] = 1093677365\n    Gu[0x2E] = 1093677368\n    Gu[0x2F] = 1093677379\n    Gu[0x30] = 1093677380\n    Gu[0x31] = 1093677369\n    Gu[0x32] = 1093677377\n    Gu[0x33] = 1093677396\n    Gu[0x34] = 1093677397\n    Gu[0x35] = 1093677398\n    Gu[0x36] = 1093677399\n    Gu[0x37] = 1093677401\n    Gu[0x38] = 1093677616\n    Gu[0x39] = 1093677402\n    Gu[0x3A] = 1093677400\n    Gu[0x3B] = 1093677393\n    Gu[0x3C] = 1093677392\n    Gu[0x3D] = 1093677394\n    Gu[0x3E] = 1093677395\n    Gu[0x3F] = 1093677391\n    Gu[0x40] = 1093677390\n    Gu[0x41] = 1093677389\n    Gu[0x42] = 1093677388\n    Gu[0x43] = 1093677876\n    Gu[0x44] = 1093677909\n    Gu[0x45] = 1093677892\n    Gu[0x46] = 1093677879\n    Gu[0x47] = 1093677912\n    Gu[0x48] = 1093678648\n    Gu[0x49] = 1093678132\n    Gu[0x4A] = 1093678133\n    Gu[0x4B] = 1093677875\n    Gu[0x4C] = 1093677894\n    Gu[0x4D] = 1093678145\n    Gu[0x4E] = 1093677904\n    Gu[0x4F] = 1093677872\n    Gu[0x50] = 1093677907\n    Gu[0x51] = 1093677908\n    Gu[0x52] = 1093677889\n    Gu[0x53] = 1093677654\n    Gu[0x54] = 1093677873\n    Gu[0x55] = 1093677898\n    Gu[0x56] = 1093677896\n    Gu[0x57] = 1093677658\n    Gu[0x58] = 1093677893\n    Gu[0x59] = 1093677897\n    Gu[0x5A] = 1093678152\n    Gu[0x5B] = 1093678148\n    Gu[0x5C] = 1093678150\n    Gu[0x5D] = 1093677895\n    Gu[0x5E] = 1093677655\n    Gu[0x5F] = 1093677881\n    Gu[0x60] = 1093678128\n    Gu[0x61] = 1093677891\n    Gu[0x62] = 1093677880\n    Gu[0x63] = 1093677901\n    Gu[0x64] = 1093677878\n    Gu[0x65] = 1093678131\n    Gu[0x66] = 1093678129\n    Gu[0x67] = 1093678130\n    Gu[0x68] = 1093677905\n    Gu[0x69] = 1093678146\n    Gu[0x6A] = 1093678137\n    Gu[0x6B] = 1093678147\n    Gu[0x6C] = 1093677902\n    Gu[0x6D] = 1093677890\n    Gu[0x6E] = 1093677906\n    Gu[0x6F] = 1093677903\n    Gu[0x70] = 1093678135\n    Gu[0x71] = 1093678134\n    Gu[0x72] = 1093678136\n    Gu[0x73] = 1093677656\n    Gu[0x74] = 1093677899\n    Gu[0x75] = 1093677900\n    Gu[0x76] = 1093677877\n    Gu[0x77] = 1093677657\n    Gu[0x78] = 1093677874\n    Gu[0x79] = 1093678169\n    Gu[0x7A] = 1093678151\n    Gu[0x7B] = 1093678149\n    Gu[0x7C] = 1093677652\n    Gu[0x7D] = 1093677653\n    Gu[0x7E] = 1093678160\n    Gu[0x7F] = 1093678164\n    Gu[0x80] = 1093678167\n    Gu[0x81] = 1093678163\n    Gu[0x82] = 1093678913\n    Gu[0x83] = 1093678161\n    Gu[0x84] = 1093678165\n    Gu[0x85] = 1093678168\n    Gu[0x86] = 1093677910\n    Gu[0x87] = 1093678170\n    Gu[0x88] = 1093678386\n    Gu[0x89] = 1093678389\n    Gu[0x8A] = 1093678409\n    Gu[0x8B] = 1093678385\n    Gu[0x8C] = 1093678388\n    Gu[0x8D] = 1093678384\n    Gu[0x8E] = 1093678390\n    Gu[0x8F] = 1093678644\n    Gu[0x90] = 1093678658\n    Gu[0x91] = 1093677913\n    Gu[0x92] = 1093678645\n    Gu[0x93] = 1093678642\n    Gu[0x94] = 1093681997\n    Gu[0x95] = 1093678646\n    Gu[0x96] = 1093678647\n    Gu[0x97] = 1093678657\n    Gu[0x98] = 1093678933\n    Gu[0x99] = 1093678927\n    Gu[0x9A] = 1093678932\n    Gu[0x9B] = 1093678930\n    Gu[0x9C] = 1093678931\n    Gu[0x9D] = 1093678924\n    Gu[0x9E] = 1093678929\n    Gu[0x9F] = 1093678926\n    Gu[0xA0] = 1093678928\n    Gu[0xA1] = 1093678925\n    Gu[0xA2] = 1093678921\n    Gu[0xA3] = 1093678919\n    Gu[0xA4] = 1093678918\n    Gu[0xA5] = 1093678920\n    Gu[0xA6] = 1093678923\n    Gu[0xA7] = 1093678917\n    Gu[0xA8] = 1093679436\n    Gu[0xA9] = 1093678915\n    Gu[0xAA] = 1093678916\n    Gu[0xAB] = 1093678914\n    Gu[0xAC] = 1093678901\n    Gu[0xAD] = 1093678899\n    Gu[0xAE] = 1093678902\n    Gu[0xAF] = 1093678897\n    Gu[0xB0] = 1093678896\n    Gu[0xB1] = 1093678904\n    Gu[0xB2] = 1093678898\n    Gu[0xB3] = 1093678903\n    Gu[0xB4] = 1093678900\n    Gu[0xB5] = 1093678935\n    Gu[0xB6] = 1093678936\n    Gu[0xB7] = 1093679152\n    Gu[0xB8] = 1093678937\n    Gu[0xB9] = 1093678938\n    Gu[0xBA] = 1093679156\n    Gu[0xBB] = 1093679158\n    Gu[0xBC] = 1093679153\n    Gu[0xBD] = 1093679154\n    Gu[0xBE] = 1093679157\n    Gu[0xBF] = 1093678678\n    Gu[0xC0] = 1093678680\n    Gu[0xC1] = 1093678681\n    Gu[0xC2] = 1093678679\n    Gu[0xC3] = 1093678682\n    Gu[0xC4] = 1093678392\n    Gu[0xC5] = 1093678675\n    Gu[0xC6] = 1093677640\n    Gu[0xC7] = 1093678676\n    Gu[0xC8] = 1093678677\n    Gu[0xC9] = 1093681740\n    Gu[0xCA] = 1093681741\n    Gu[0xCB] = 1093681742\n    Gu[0xCC] = 1093681743\n    Gu[0xCD] = 1093681744\n    Gu[0xCE] = 1093681496\n    Gu[0xCF] = 1093681990\n    Gu[0xD0] = 1093682007\n    gu = 208\n    hu = \"ZWAJKLMNOPQRSTUVabcdefghjkmnopqrs8765432XYBCDEFGHtuvwxyz9\"\n    Fu = True\n    ku = True\n    Qu = False\n    qu = \"\"\n    au[1] = 0\n    nu = 1\n    fu = False\n    du[1] = 0\n    Ru[1] = 0\n\n\n# 73102 rRw\ndef mFr():  # Init function2, takes nothing returns nothing\n    global lU\n    oU[0] = \"\"\n    OU[0] = \"\"\n    lU = 0\n    kw = \"EN3P29DXeruxo6RUW5ZvYFbwgQ7hfAyBztSn4sKCqHpLOajkTVdG8JmcM\"\n    jw = \"vHGKFaXA5V72NbWruZJLxYnSR3k8Owmhepszg6oTyEDdUtqMQP4jcf9CB\"\n    xw = \"9fb%(wgQtS+_n4s[KCqH#pLAyBz<ruxo6R-mcM>EN3PU.D7hW5]ZvYF,8J$OX/eajkTV)d*G2\"\n    vw = \"vHmh/eps#(zFa6o&]TWruZJLxYnSR_=3k>8Ow)A5V>7yEDdU.tqMQP4jcf9,C$+BXG[*K2Nbg\"\n    mw = \"9fb(wgQtS+_n4s[KCqH#pLAyBz<ruxo6R-mcM>EN3PU.D7hW5]ZvYF,8JOXeajkTV)d*G2\"\n    Qw = \"]Z4sp53PU.ed*D7hW6R-mcM>ENzn9fbF,)(wgy[KS+_uxo8JOXG2qH#vYaCQtjkTVBLA<r\"\n    Ww = \"Fs3u.hSZ6w7>LQWfz8aX<gG,trRcNkBeU2pC4Po)qOAxvb]D9dMVET(Yy+5#mHnJj*K[\"\n    Ew = \"p>wn8sv<mRHQeX7FrxqC[2K9MWdoUgf5yVGLhAZ+zJu3B#)SPbjD(OT.*c64kENY]t,a\"\n    Zw = \"t[nFb&G.Q*co6Sar2p5Hw8JzqhsREY!VLx9(kP3NXAT>v#ZOWgMd4U)jKBD+m]u<eCy7_f?\"\n    Uw = \"O)_CSDLxWr?6bmBvgUt5dHFQpqY[XokG9P4*yj.T<ZKe>87ERw3Mfza!+2sVc#Anu(hJN]\"\n    lU = 0\n    oU[lU] = kw\n    OU[lU] = jw\n    lU += 1\n    oU[lU] = xw\n    OU[lU] = vw\n    lU += 1\n    oU[lU] = mw\n    OU[lU] = Qw\n    lU += 1\n    oU[lU] = Ww\n    OU[lU] = Ew\n    lU += 1\n    oU[lU] = Zw\n    OU[lU] = Uw\n    lU += 1\n    oU[lU] = \"t[nFb&G.)jKp5Hw?8,JzqCy7_fQ*co6Sar2T>v#ZOWghsEY!VLx9(kP3NXABD+m]uR<eMd4U\"\n    OU[lU] = \"ObmBvgUt5d87ERw3Mfza!+2sVc#AnqY[XokG9P4*yu(hJNHFQpj.T,<ZKe>)_CSDLxWr?6]\"\n    lU += 1\n    oU[lU] = \"!gWY2tqxeA,Q?aT8&N9Fd6kOm]*)XscB+fZRHnEy[wM5GP#p(z<SLbCKjU_u73hDVr>vo4J\"\n    OU[lU] = \"AZf!N[8qLhzUgCwntGW9SyDb_Pd3Qc?kM4KjvVmeJu*ap65+Y)F,BHROX<#(r]>Exs7To2\"\n\n    for i in range(1, 24):\n        au[i] = -1\n\n\ndef encode():  # takes nothing returns string\n    lWw = len(hu)  # local integer\n    yWw = \"\"  # local string\n    qWw = 1000000  # local integer\n    aWw = \"0123456789\"  # local string\n    iWw = 0  # local integer\n    bWw = {}  # local integer array\n\n    # looks like this is the input-output part\n    while True:\n        iWw += 1\n        if iWw > nu:\n            break\n        yWw += str(au[iWw]) + \"-\"\n\n    yWw += str(tWw(yWw))\n\n    if au[1] == 0:\n        yWw = \"-\" + yWw\n\n    # a lot of weird maths\n    iWw = 0\n    while True:\n        bWw[iWw] = 0\n        iWw += 1\n        if iWw >= 100:\n            break\n\n    OWw = 0\n    iWw = 0\n    while True:\n        SWw = 0\n        while True:\n            bWw[SWw] = bWw[SWw] * 11\n            SWw += 1\n            if SWw > OWw:\n                break\n        oWw = 0\n        pWw = yWw[iWw: iWw + 1]\n        while aWw[oWw: oWw + 1] != pWw:\n            oWw += 1\n            if oWw > 9:\n                break\n        bWw[0] += oWw\n        SWw = 0\n        while True:\n            cWw = int(bWw[SWw] / qWw)\n            bWw[SWw] -= cWw * qWw\n            bWw[SWw + 1] += cWw\n            SWw += 1\n            if SWw > OWw:\n                break\n        if cWw > 0:\n            OWw += 1\n        iWw += 1\n        if iWw >= len(yWw):\n            break\n\n    # some weird maths\n    yWw = \"\"\n    while OWw >= 0:\n        SWw = OWw\n        while SWw > 0:\n            cWw = int(bWw[SWw] / lWw)\n            bWw[SWw - 1] = bWw[SWw - 1] + (bWw[SWw] - cWw * lWw) * qWw\n            bWw[SWw] = cWw\n            SWw -= 1\n        cWw = int(bWw[SWw] / lWw)\n        iWw = bWw[SWw] - cWw * lWw\n        yWw = yWw + hu[iWw: iWw + 1]\n        bWw[SWw] = cWw\n        if bWw[OWw] == 0:\n            OWw -= 1\n\n    # this part divides the code by 4 from right to left with dashes (-)\n    iWw = len(yWw)\n    eWw = 0\n    pWw = \"\"\n    while iWw > 0:\n        iWw -= 1\n        pWw += yWw[iWw: iWw + 1]\n        eWw += 1\n        if eWw == 4 and iWw > 0:\n            pWw += \"-\"\n            eWw = 0\n\n    return pWw\n\n\ndef ZQw(QQw: int):  # takes integer QQw returns integer\n    WQw = int(QQw / (256 * 256 * 256))  # local integer\n    QQw = QQw - WQw * 256 * 256 * 256\n    EQw = du[WQw]\n    WQw = int(QQw / (256 * 256))\n    QQw = QQw - WQw * 256 * 256\n    EQw = EQw * 64 + du[WQw]\n    WQw = int(QQw / 256)\n    EQw = EQw * 64 + du[WQw]\n    return EQw * 64 + du[QQw - WQw * 256]\n\n\ndef mQw():  # takes nothing returns nothing\n    xQw = 0  # local integer\n    vQw = 0  # local integer\n    while True:\n        du[xQw + 48] = vQw\n        Ru[xQw] = xQw + 48\n        vQw += 1\n        xQw += 1\n        if xQw >= 10:\n            break\n    xQw = 0\n    while True:\n        du[xQw + 97] = vQw\n        du[xQw + 65] = vQw + 26\n        Ru[xQw + 10] = xQw + 97\n        Ru[xQw + 26 + 10] = xQw + 65\n        vQw += 1\n        xQw += 1\n        if xQw >= 26:\n            break\n\n\ndef AQw(UQw: int):  # takes integer UQw returns integer\n    IQw = int(UQw / (64 * 64 * 64))  # local integer\n    UQw -= IQw * 64 * 64 * 64\n    PQw = Ru[IQw]\n    IQw = int(UQw / (64 * 64))\n    UQw -= IQw * 64 * 64\n    PQw = PQw * 256 + Ru[IQw]\n    IQw = int(UQw / 64)\n    PQw = PQw * 256 + Ru[IQw]\n    return PQw * 256 + Ru[UQw - IQw * 64]\n\n\ndef rxw(uxw: int):  # takes integer uxw returns integer\n    global Qu\n    if not Qu:\n        Qu = True\n        mQw()\n    if uxw <= ju:\n        return Tu[uxw]\n    return AQw(uxw)\n\n\ndef MQw(XQw: str):  # takes string returns integer (number of the character \\ number in an array)\n    CQw = 0  # local integer\n    VQw = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"  # local string\n    BQw = \"abcdefghijklmnopqrstuvwxyz\"  # local string\n    NQw = \"0123456789\"  # local string\n    while True:\n        if VQw[CQw: CQw + 1] == XQw:\n            return CQw\n        if BQw[CQw: CQw + 1] == XQw:\n            return CQw\n        CQw += 1\n        if CQw >= 26:\n            break\n    CQw = 0\n    while True:\n        if NQw[CQw: CQw + 1] == XQw:\n            return CQw\n        CQw += 1\n        if CQw >= 10:\n            break\n    return 0\n\n\ndef decode(dWw: str):  # takes string dWw returns boolean\n    global nu, name_hash\n    GWw = 0  # local integer\n    FWw = \"\"  # local string\n    kWw = len(hu)  # local integer\n    jWw = -1  # local integer\n    xWw = 1000000  # local integer\n    vWw = \"0123456789-\"  # local string\n    fWw = 0  # local integer\n    hWw = {}  # local integer\n    while True:\n        hWw[fWw] = 0\n        fWw += 1\n        if fWw >= 100:\n            break\n    gWw = 0\n    fWw = 0\n    while True:\n        RWw = 0\n        while True:\n            hWw[RWw] *= kWw\n            RWw += 1\n            if RWw > gWw:\n                break\n        jWw += 1\n        if jWw == 4:\n            jWw = 0\n            fWw += 1\n        YWw = kWw\n        mWw = dWw[fWw: fWw + 1]\n        while True:\n            YWw -= 1\n            if YWw < 1:\n                break\n            if hu[YWw: YWw + 1] == mWw:\n                break\n        hWw[0] += YWw\n        RWw = 0\n        while True:\n            TWw = int(hWw[RWw] / xWw)\n            hWw[RWw] -= TWw * xWw\n            hWw[RWw + 1] += TWw\n            RWw += 1\n            if RWw > gWw:\n                break\n        if TWw > 0:\n            gWw += 1\n        fWw += 1\n        if fWw >= len(dWw):\n            break\n    while gWw >= 0:\n        RWw = gWw\n        while RWw > 0:\n            TWw = int(hWw[RWw] / 11)\n            hWw[RWw - 1] += (hWw[RWw] - TWw * 11) * xWw\n            hWw[RWw] = TWw\n            RWw -= 1\n        TWw = int(hWw[RWw] / 11)\n        fWw = hWw[RWw] - TWw * 11\n        FWw = vWw[fWw: fWw + 1] + FWw\n        hWw[RWw] = TWw\n        if hWw[gWw] == 0:\n            gWw -= 1\n    fWw = 0\n    RWw = 0\n    while True:\n        while fWw < len(FWw):\n            if fWw > 0 and FWw[fWw: fWw + 1] == \"-\" and FWw[fWw - 1: fWw] != \"-\":\n                break\n            fWw += 1\n        if fWw < len(FWw):\n            TWw = fWw\n        GWw += 1\n        try:\n            au[GWw] = int(FWw[RWw: fWw])\n        except ValueError:\n            return False\n        RWw = fWw + 1\n        fWw += 1\n        if fWw >= len(FWw):\n            break\n    RWw = tWw(FWw[:TWw])\n    nu = GWw - 1\n    # if RWw == au[GWw]:\n    #     return True\n    # return False\n    # return True\n\n    name_hash = au[GWw] - RWw\n    return validate()\n\n\ndef tWw(wWw: str):  # takes string wWw returns integer, calculates the hash\n    uWw = 0  # local integer\n    rWw = 0  # local integer\n    if keep_hash:\n        rWw += name_hash\n    else:\n        sWw = player_name  # local string\n        if ku:\n            while True:\n                rWw += MQw(sWw[uWw: uWw + 1])\n                uWw += 1\n                if uWw >= len(sWw):\n                    break\n    uWw = 0\n    while True:\n        rWw += MQw(wWw[uWw: uWw + 1])\n        uWw += 1\n        if uWw >= len(wWw):\n            break\n    return rWw\n\n\ndef Cjw(Xjw: str):  # takes string Xjw returns boolean\n    global Fu, hu\n    if not Fu:\n        hu = hu.upper()\n        Xjw = Xjw.upper()\n    return decode(Xjw)\n\n\ndef tkr(ukr: str):  # takes string ukr returns boolean\n    global hu, qu, fu\n    rkr = False  # local boolean\n    skr = lU  # local integer\n    while skr >= 0:\n        hu = oU[skr]\n        qu = ukr\n        fu = Cjw(qu)\n        if fu:\n            rkr = True\n            break\n        skr -= 1\n    return rkr\n\n\ndef mkr(kkr: str):  # takes string kkr returns boolean\n    global hu, qu, fu\n    xkr = False\n    vkr = lU\n    while vkr >= 0:\n        hu = OU[vkr]\n        qu = kkr\n        fu = Cjw(qu)\n        if fu:\n            xkr = True\n            break\n        vkr -= 1\n    return xkr\n\n\ndef Oxw(oxw: int):  # takes integer oxw returns integer\n    global Qu, xu\n    if not Qu:\n        Qu = True\n        mQw()\n    if oxw <= xu:\n        return Yu[oxw]\n    return AQw(oxw)\n\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#                       utility functions\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndef validate():\n    if au[6] not in range(len(ProfessionRank)):\n        return False\n    if au[10] not in range(1, len(Hero) + 1):\n        return False\n    return True\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#                              API\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndef load_hero_code(code: str):  # Tkr, 51129\n    global Iu, nu\n\n    if not tkr(code):\n        print(\"Load Failed. Please recheck your code.\")\n        return None\n\n    print(\"Load Successful.\")\n    result = HeroCodeFields(au[1], au[2], au[3], au[4], au[5], ProfessionRank[au[6]],\n                            au[7], au[8], au[9], Hero[au[10]], au[11], au[12], au[13])\n    for i in range(int((nu - 13) / 2)):\n        result.abilities.append(Ability(au[14 + 2 * i], au[15 + 2 * i]))\n    result.checksum = au[nu + 1]\n\n    return result\n\n\ndef load_item_code(code: str):  # Jkr, 40635\n    global nu\n\n    if not mkr(code):\n        print(\"Load Failed. Please recheck your code.\")\n        return None\n\n    print(\"Load Successful.\")\n    result = ItemCodeFields(au[1], au[2], au[3], au[4], au[5])\n    print(f'the number of items is: {au[4]}')\n    nu = 5\n    for i in range(6):\n        nu += 1\n        itemId = au[nu]\n        nu += 1\n        if itemId != 30:  # not an empty slot\n            itemAmount = au[nu]\n            result.items[i] = Item(itemId, itemAmount)\n    \n    print(f'the real number of items is: {len(result.items)}')\n    print(result.items)\n    for item in result.items.values():\n        print(f'item is: {ItemName[item.id]}')\n        print(f'amount is: {item.amount}')\n\n    result.numberOfStashItems = au[nu]\n    nu += 1\n    for i in range(6):\n        nu += 1\n        itemId = au[nu]\n        nu += 1\n        if itemId != 30:  # not an empty slot\n            itemAmount = au[nu]\n            result.stashItems[i] = Item(itemId, itemAmount)\n\n    result.checksum = au[nu + 1]\n\n    return result\n\n\ndef save_hero_code(fields: HeroCodeFields, name: str=None):\n    global hu, nu, player_name, keep_hash\n    if not name or name == '':\n        keep_hash = True\n    else:\n        player_name = name\n    hu = oU[lU]\n    au[1] = fields.int1\n    au[2] = fields.int2\n    au[3] = fields.food\n    au[4] = fields.professionLvl\n    au[5] = fields.hasFishingRod\n    try:\n        au[6] = ProfessionRank[fields.professionRank]\n    except KeyError:\n        return None\n    au[7] = fields.revivalLocation\n    au[8] = fields.imp5Stage\n    au[9] = 1\n    try:\n        au[10] = Hero[fields.heroID]\n    except KeyError:\n        return None\n    au[11] = fields.heroXP\n    au[12] = fields.locationX\n    au[13] = fields.locationY\n    nu = 13\n    for ability in fields.abilities:\n        nu += 1\n        au[nu] = ability.id\n        nu += 1\n        au[nu] = ability.level\n    \n    encoded = encode()\n    keep_hash = False\n    return encoded\n\n\ndef save_item_code(fields: ItemCodeFields, name: str=None):\n    global hu, nu, player_name, keep_hash\n    if not name or name == '':\n        keep_hash = True\n    else:\n        player_name = name\n    hu = OU[lU]\n    au[1] = fields.gold\n    au[2] = fields.shards\n    au[3] = fields.pvpPoints\n    au[4] = fields.unlockedCritterTiers\n    au[5] = fields.numberOfItems\n    nu = 5\n\n    i = 6\n    for item in fields.items.values():\n        nu += 1\n        au[nu] = item.id\n        nu += 1\n        au[nu] = item.amount\n        i -= 1\n    while i > 0:\n        nu += 1\n        au[nu] = 30\n        nu += 1\n        au[nu] = 0\n        i -= 1\n\n    nu += 1\n    au[nu] = fields.numberOfStashItems\n    i = 6\n    for item in fields.stashItems.values():\n        nu += 1\n        au[nu] = item.id\n        nu += 1\n        au[nu] = item.amount\n        i -= 1\n    while i > 0:\n        nu += 1\n        au[nu] = 30\n        nu += 1\n        au[nu] = 0\n        i -= 1\n        \n    encoded = encode()\n    keep_hash = False\n    return encoded\n\n\ndef encoding_version():\n    return lU + 1\n\n\ndef save(fields: HeroCodeFields | ItemCodeFields, name: str=None):\n    if type(fields) == HeroCodeFields:\n        return save_hero_code(fields, name)\n    elif type(fields) == ItemCodeFields:\n        return save_item_code(fields, name)\n    else:\n        return None\n\n\ndef load(code: str, mode: int=1):\n    in_brackets = False\n\n    if len(code) < 1:\n        print(\"Load Failed. The code is too short.\")\n        return None\n\n    min_length = 10\n    if code[0] == '\"' and code[len(code) - 1] == '\"' or \\\n        code[0] == \"'\" and code[len(code) - 1] == \"'\":\n        if len(code) < min_length:\n            print(\"Load Failed. The code is too short.\")\n            return None\n        code = code[1: len(code) - 1]\n        in_brackets = True\n        min_length -= 2\n\n    if len(code) >= min_length:\n        if code[:6] == '-load ':\n            code = code[6:]\n        elif code[:7] == '-load2 ':\n            code = code[7:]\n            mode = 2\n    elif in_brackets:\n        print(\"Load Failed. The code is neither of supported types.\")\n        return None\n\n    if code[0] == ' ': code = code[1:]\n\n    if mode == 1:\n        return load_hero_code(code)\n    else: return load_item_code(code)\n\n\ndef load_file(text: str):\n    # find the player_name\n    pattern = 'call Preload( \"Player Name: '\n    start_pos = text.find(pattern) + len(pattern)\n    end_pos = text.find('\\n', start_pos) - 3\n    if start_pos < 300 or end_pos < start_pos:  # roughly\n        print(\"Load Failed. The save file is invalid.\")\n        return None\n    name = text[start_pos: end_pos]\n\n    # find the first code\n    pattern = 'call Preload( \"-load '\n    start_pos = text.find(pattern) + len(pattern)\n    end_pos = text.find('\\n', start_pos) - 3\n    if end_pos <= start_pos:  # yields neither end_pos nor start_pos is -1\n        print(\"Load Failed. The save file is invalid.\")\n        return None\n    code1 = text[start_pos:end_pos]\n\n    # find the second code\n    pattern = 'call Preload( \"-load2 '\n    start_pos = text.find(pattern) + len(pattern)\n    end_pos = text.find('\\n', start_pos) - 3\n    if end_pos <= start_pos:  # yields neither end_pos nor start_pos is -1\n        print(\"Load Failed. The save file is invalid.\")\n        return None\n    code2 = text[start_pos:end_pos]\n\n    return name, load_hero_code(code1), load_item_code(code2), code1, code2\n\n\ndef print_code(code: HeroCodeFields | ItemCodeFields, name: str = None):\n    if type(code) == HeroCodeFields:\n        hero = code\n        print(f\"Code: {save_hero_code(hero, name)}\")\n        print(\"Hero Code Fields:\")\n        print(f\"  Int1: {hero.int1}\")\n        print(f\"  Int2: {hero.int2}\")\n        print(f\"  Food: {hero.food}\")\n        print(f\"  Profession Level: {hero.professionLvl}\")\n        print(f\"  Has Fishing Rod: {hero.hasFishingRod}\")\n        print(f\"  Profession Rank: {hero.professionRank}\")\n        print(f\"  Revival Location: {hero.revivalLocation}\")\n        print(f\"  Imp5 Stage: {hero.imp5Stage}\")\n        print(f\"  Int3: {hero.int3}\")\n        print(f\"  Hero ID: {hero.heroID}\")\n        print(f\"  Hero XP: {hero.heroXP}\")\n        print(f\"  Location X: {hero.locationX}\")\n        print(f\"  Location Y: {hero.locationY}\")\n        print(\"  Abilities:\")\n        for idx, ability in enumerate(hero.abilities):\n            print(f\"    {idx + 1}. ID: {ability.id}, Level: {ability.level}\")\n        print(f\"  Checksum: {hero.checksum}\")\n    elif type(code) == ItemCodeFields:\n        items = code\n        print(f\"Code: {save_item_code(items, name)}\")\n        print(\"Item Code Fields:\")\n        print(f\"  Gold: {items.gold}\")\n        print(f\"  Shards: {items.shards}\")\n        print(f\"  PVP Points: {items.pvpPoints}\")\n        print(f\"  Unlocked Critter Tiers: {items.unlockedCritterTiers}\")\n        print(f\"  Number of Items: {items.numberOfItems}\")\n        print(\"  Items:\")\n        for item_id, item in items.items.items():\n            print(f\"    {item_id + 1}) ID: {item.id}, Amount: {item.amount}\")\n        print(f\"  Number of Stash Items: {items.numberOfStashItems}\")\n        print(\"  Stash Items:\")\n        for item_id, item in items.stashItems.items():\n            print(f\"    {item_id + 1}) ID: {item.id}, Amount: {item.amount}\")\n        print(f\"  Checksum: {items.checksum}\")\n    else:\n        print(\"No code given.\")\n\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#                        initialization\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\npEw()\nmFr()\n\n# don't do it, it might break the game\ndef encode_danger():\n    # our_things = [0, 0, 0, 7, 1, 1, 1, 16, 163710, -8115, 2535, 39, 13, 40, 1, 41, 17, 42, 25, 171]\n    # our_things = [0, 0, 0, 447, -661, -5546, 4566, 16, 999, -170, 44400, -39, 13, -45340, 4531, 44531, 17, 42, 25, 4677, 555]\n    our_things = [0, '-']\n    for i in range(len(our_things)):\n        au[i + 1] = our_things[i]\n    nu = len(our_things)\n    hu = oU[lU]\n    print('-load ' + encode())\n\n# encode_danger()\n", []], "browser": [".py", "", [], 1], "sys": [".py", "\nfrom _sys import *\nimport javascript\n\n_getframe=Getframe\n\nabiflags=0\n\ndef audit(event,*args):\n ''\n pass\n \nbrython_debug_mode=__BRYTHON__.debug\n\nbase_exec_prefix=__BRYTHON__.brython_path\n\nbase_prefix=__BRYTHON__.brython_path\n\nbuiltin_module_names=__BRYTHON__.builtin_module_names\n\nbyteorder='little'\n\ndont_write_bytecode=True\n\nexec_prefix=__BRYTHON__.brython_path\n\nexecutable=__BRYTHON__.brython_path+'/brython.js'\n\nargv=[__BRYTHON__.script_path]\n\n\ndef displayhook(value):\n if value is not None :\n  stdout.write(repr(value))\n  \ndef exit(i=None ):\n raise SystemExit('')\n \nclass flag_class:\n\n def __init__(self):\n  self.debug=0\n  self.inspect=0\n  self.interactive=0\n  self.optimize=0\n  self.dont_write_bytecode=0\n  self.no_user_site=0\n  self.no_site=0\n  self.ignore_environment=0\n  self.verbose=0\n  self.bytes_warning=0\n  self.quiet=0\n  self.hash_randomization=1\n  \nflags=flag_class()\n\nclass float_info:\n mant_dig=53\n max=javascript.Number.MAX_VALUE\n min=javascript.Number.MIN_VALUE\n radix=2\n \ndef getfilesystemencoding(*args,**kw):\n ''\n\n \n return 'utf-8'\n \ndef getfilesystemencodeerrors():\n return \"utf-8\"\n \ndef getrecursionlimit():\n return 200\n \ndef intern(string):\n return string\n \nclass int_info:\n bits_per_digit=30\n sizeof_digit=4\n \nmaxsize=2 **63 -1\n\nmaxunicode=1114111\n\nplatform=\"brython\"\n\nprefix=__BRYTHON__.brython_path\n\nversion='.'.join(str(x)for x in __BRYTHON__.version_info[:3])\nversion +=\" (default, %s) \\n[Javascript 1.5] on Brython\"\\\n%__BRYTHON__.compiled_date\nhexversion=0x030800f0\n\nclass _version_info:\n\n def __init__(self,version_info):\n  self.version_info=version_info\n  self.major=version_info[0]\n  self.minor=version_info[1]\n  self.micro=version_info[2]\n  self.releaselevel=version_info[3]\n  self.serial=version_info[4]\n  \n def __getitem__(self,index):\n  if isinstance(self.version_info[index],list):\n   return tuple(self.version_info[index])\n  return self.version_info[index]\n  \n def hexversion(self):\n  try :\n   return '0%d0%d0%d'%(self.major,self.minor,self.micro)\n  finally :\n   return '0%d0000'%(self.major)\n   \n def __str__(self):\n  _s=\"sys.version(major=%d, minor=%d, micro=%d, releaselevel='%s', \"\\\n  \"serial=%d)\"\n  return _s %(self.major,self.minor,self.micro,\n  self.releaselevel,self.serial)\n  \n def __eq__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)==other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ge__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __gt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __le__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __lt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ne__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)!=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n  \n  \nversion_info=_version_info(__BRYTHON__.version_info)\n\nclass SimpleNamespace:\n\n def __init__(self,/,**kwargs):\n  self.__dict__.update(kwargs)\n  \n def __repr__(self):\n  items=(f\"{k}={v!r}\"for k,v in self.__dict__.items())\n  return \"{}({})\".format(\"namespace\",\", \".join(items))\n  \n def __eq__(self,other):\n  if isinstance(self,SimpleNamespace)and isinstance(other,SimpleNamespace):\n   return self.__dict__ ==other.__dict__\n  return NotImplemented\n  \nSimpleNamespace.__module__=\"types\"\n\nvi=_version_info(__BRYTHON__.implementation)\nimplementation=SimpleNamespace(name=\"brython\",\nversion=vi,\nhexversion=vi.hexversion(),\ncache_tag=None )\n\nclass _hash_info:\n\n def __init__(self):\n  self.width=32\n  self.modulus=2147483647\n  self.inf=314159\n  self.nan=0\n  self.imag=1000003\n  self.algorithm='siphash24'\n  self.hash_bits=64\n  self.seed_bits=128\n  cutoff=0\n  \n def __repr__(self):\n \n  return \"sys.hash_info(width=32, modulus=2147483647, inf=314159, \"\\\n  \"nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, \"\\\n  \"seed_bits=128, cutoff=0)\"\n  \nhash_info=_hash_info()\n\nclass _float_info:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n def __init__(self):\n  self.dig=15\n  self.epsilon=2 **-52\n  self.mant_dig=53\n  self.max=__BRYTHON__.max_float\n  self.max_exp=2 **10\n  self.max_10_exp=308\n  self.min=2 **(-1022)\n  self.min_exp=-1021\n  self.min_10_exp=-307\n  self.radix=2\n  self.rounds=1\n  self._tuple=(self.max,self.max_exp,self.max_10_exp,self.min,\n  self.min_exp,self.min_10_exp,self.dig,self.mant_dig,self.epsilon,\n  self.radix,self.rounds)\n  \n def __getitem__(self,k):\n  return self._tuple[k]\n  \n def __iter__(self):\n  return iter(self._tuple)\n  \nfloat_info=_float_info()\n\nwarnoptions=[]\n\ndef getfilesystemencoding():\n return 'utf-8'\n \n \n__stdout__=__BRYTHON__.stdout\n__stderr__=__BRYTHON__.stderr\n__stdin__=__BRYTHON__.stdin\n\n__excepthook__=excepthook\n", ["javascript", "_sys"]]}
__BRYTHON__.update_VFS(scripts)